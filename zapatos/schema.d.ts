/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: app_private === */

  export namespace app_private {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **app_private.connect_pg_simple_sessions**
     * - Table in database
     */
    export namespace connect_pg_simple_sessions {
      export type Table = 'app_private.connect_pg_simple_sessions';
      export interface Selectable {
        /**
        * **app_private.connect_pg_simple_sessions.expire**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        expire: Date;
        /**
        * **app_private.connect_pg_simple_sessions.sess**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        sess: db.JSONValue;
        /**
        * **app_private.connect_pg_simple_sessions.sid**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        sid: string;
      }
      export interface JSONSelectable {
        /**
        * **app_private.connect_pg_simple_sessions.expire**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        expire: db.TimestampTzString;
        /**
        * **app_private.connect_pg_simple_sessions.sess**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        sess: db.JSONValue;
        /**
        * **app_private.connect_pg_simple_sessions.sid**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        sid: string;
      }
      export interface Whereable {
        /**
        * **app_private.connect_pg_simple_sessions.expire**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        expire?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.connect_pg_simple_sessions.sess**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        sess?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.connect_pg_simple_sessions.sid**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        sid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_private.connect_pg_simple_sessions.expire**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        expire: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
        /**
        * **app_private.connect_pg_simple_sessions.sess**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        sess: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
        /**
        * **app_private.connect_pg_simple_sessions.sid**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        sid: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_private.connect_pg_simple_sessions.expire**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        expire?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
        /**
        * **app_private.connect_pg_simple_sessions.sess**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        sess?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
        /**
        * **app_private.connect_pg_simple_sessions.sid**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        sid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'session_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_private.sessions**
     * - Table in database
     */
    export namespace sessions {
      export type Table = 'app_private.sessions';
      export interface Selectable {
        /**
        * **app_private.sessions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: Date;
        /**
        * **app_private.sessions.last_active**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_active: Date;
        /**
        * **app_private.sessions.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string;
        /**
        * **app_private.sessions.uuid**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        uuid: string;
      }
      export interface JSONSelectable {
        /**
        * **app_private.sessions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: db.TimestampTzString;
        /**
        * **app_private.sessions.last_active**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_active: db.TimestampTzString;
        /**
        * **app_private.sessions.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string;
        /**
        * **app_private.sessions.uuid**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        uuid: string;
      }
      export interface Whereable {
        /**
        * **app_private.sessions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.sessions.last_active**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_active?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.sessions.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.sessions.uuid**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        uuid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_private.sessions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.sessions.last_active**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_active?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.sessions.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_private.sessions.uuid**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        uuid?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_private.sessions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.sessions.last_active**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_active?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.sessions.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_private.sessions.uuid**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        uuid?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'sessions_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_private.unregistered_email_password_resets**
     * - Table in database
     */
    export namespace unregistered_email_password_resets {
      export type Table = 'app_private.unregistered_email_password_resets';
      export interface Selectable {
        /**
        * **app_private.unregistered_email_password_resets.attempts**
        *
        * We store the number of attempts to help us detect accounts being attacked.
        * - `int4` in database
        * - `NOT NULL`, default: `1`
        */
        attempts: number;
        /**
        * **app_private.unregistered_email_password_resets.email**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email: string;
        /**
        * **app_private.unregistered_email_password_resets.latest_attempt**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        latest_attempt: Date;
      }
      export interface JSONSelectable {
        /**
        * **app_private.unregistered_email_password_resets.attempts**
        *
        * We store the number of attempts to help us detect accounts being attacked.
        * - `int4` in database
        * - `NOT NULL`, default: `1`
        */
        attempts: number;
        /**
        * **app_private.unregistered_email_password_resets.email**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email: string;
        /**
        * **app_private.unregistered_email_password_resets.latest_attempt**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        latest_attempt: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **app_private.unregistered_email_password_resets.attempts**
        *
        * We store the number of attempts to help us detect accounts being attacked.
        * - `int4` in database
        * - `NOT NULL`, default: `1`
        */
        attempts?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.unregistered_email_password_resets.email**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.unregistered_email_password_resets.latest_attempt**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        latest_attempt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_private.unregistered_email_password_resets.attempts**
        *
        * We store the number of attempts to help us detect accounts being attacked.
        * - `int4` in database
        * - `NOT NULL`, default: `1`
        */
        attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.unregistered_email_password_resets.email**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_private.unregistered_email_password_resets.latest_attempt**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        latest_attempt: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_private.unregistered_email_password_resets.attempts**
        *
        * We store the number of attempts to help us detect accounts being attacked.
        * - `int4` in database
        * - `NOT NULL`, default: `1`
        */
        attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.unregistered_email_password_resets.email**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_private.unregistered_email_password_resets.latest_attempt**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        latest_attempt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      }
      export type UniqueIndex = 'unregistered_email_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_private.user_authentication_secrets**
     * - Table in database
     */
    export namespace user_authentication_secrets {
      export type Table = 'app_private.user_authentication_secrets';
      export interface Selectable {
        /**
        * **app_private.user_authentication_secrets.details**
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details: db.JSONValue;
        /**
        * **app_private.user_authentication_secrets.user_authentication_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_authentication_id: string;
      }
      export interface JSONSelectable {
        /**
        * **app_private.user_authentication_secrets.details**
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details: db.JSONValue;
        /**
        * **app_private.user_authentication_secrets.user_authentication_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_authentication_id: string;
      }
      export interface Whereable {
        /**
        * **app_private.user_authentication_secrets.details**
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_authentication_secrets.user_authentication_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_authentication_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_private.user_authentication_secrets.details**
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_authentication_secrets.user_authentication_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_authentication_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_private.user_authentication_secrets.details**
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_authentication_secrets.user_authentication_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_authentication_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'user_authentication_secrets_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_private.user_email_secrets**
     * - Table in database
     */
    export namespace user_email_secrets {
      export type Table = 'app_private.user_email_secrets';
      export interface Selectable {
        /**
        * **app_private.user_email_secrets.password_reset_email_sent_at**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - Nullable, no default
        */
        password_reset_email_sent_at: Date | null;
        /**
        * **app_private.user_email_secrets.user_email_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_email_id: string;
        /**
        * **app_private.user_email_secrets.verification_email_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        verification_email_sent_at: Date | null;
        /**
        * **app_private.user_email_secrets.verification_token**
        * - `text` in database
        * - Nullable, no default
        */
        verification_token: string | null;
      }
      export interface JSONSelectable {
        /**
        * **app_private.user_email_secrets.password_reset_email_sent_at**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - Nullable, no default
        */
        password_reset_email_sent_at: db.TimestampTzString | null;
        /**
        * **app_private.user_email_secrets.user_email_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_email_id: string;
        /**
        * **app_private.user_email_secrets.verification_email_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        verification_email_sent_at: db.TimestampTzString | null;
        /**
        * **app_private.user_email_secrets.verification_token**
        * - `text` in database
        * - Nullable, no default
        */
        verification_token: string | null;
      }
      export interface Whereable {
        /**
        * **app_private.user_email_secrets.password_reset_email_sent_at**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - Nullable, no default
        */
        password_reset_email_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_email_secrets.user_email_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_email_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_email_secrets.verification_email_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        verification_email_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_email_secrets.verification_token**
        * - `text` in database
        * - Nullable, no default
        */
        verification_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_private.user_email_secrets.password_reset_email_sent_at**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - Nullable, no default
        */
        password_reset_email_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_email_secrets.user_email_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_email_id: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_private.user_email_secrets.verification_email_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        verification_email_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_email_secrets.verification_token**
        * - `text` in database
        * - Nullable, no default
        */
        verification_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_private.user_email_secrets.password_reset_email_sent_at**
        *
        * We store the time the last password reset was sent to this email to prevent the email getting flooded.
        * - `timestamptz` in database
        * - Nullable, no default
        */
        password_reset_email_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_email_secrets.user_email_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_email_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_private.user_email_secrets.verification_email_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        verification_email_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_email_secrets.verification_token**
        * - `text` in database
        * - Nullable, no default
        */
        verification_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'user_email_secrets_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_private.user_secrets**
     * - Table in database
     */
    export namespace user_secrets {
      export type Table = 'app_private.user_secrets';
      export interface Selectable {
        /**
        * **app_private.user_secrets.delete_account_token**
        * - `text` in database
        * - Nullable, no default
        */
        delete_account_token: string | null;
        /**
        * **app_private.user_secrets.delete_account_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        delete_account_token_generated: Date | null;
        /**
        * **app_private.user_secrets.failed_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_password_attempts: number;
        /**
        * **app_private.user_secrets.failed_reset_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_reset_password_attempts: number;
        /**
        * **app_private.user_secrets.first_failed_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_password_attempt: Date | null;
        /**
        * **app_private.user_secrets.first_failed_reset_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_reset_password_attempt: Date | null;
        /**
        * **app_private.user_secrets.last_login_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_login_at: Date;
        /**
        * **app_private.user_secrets.password_hash**
        * - `text` in database
        * - Nullable, no default
        */
        password_hash: string | null;
        /**
        * **app_private.user_secrets.reset_password_token**
        * - `text` in database
        * - Nullable, no default
        */
        reset_password_token: string | null;
        /**
        * **app_private.user_secrets.reset_password_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reset_password_token_generated: Date | null;
        /**
        * **app_private.user_secrets.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string;
      }
      export interface JSONSelectable {
        /**
        * **app_private.user_secrets.delete_account_token**
        * - `text` in database
        * - Nullable, no default
        */
        delete_account_token: string | null;
        /**
        * **app_private.user_secrets.delete_account_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        delete_account_token_generated: db.TimestampTzString | null;
        /**
        * **app_private.user_secrets.failed_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_password_attempts: number;
        /**
        * **app_private.user_secrets.failed_reset_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_reset_password_attempts: number;
        /**
        * **app_private.user_secrets.first_failed_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_password_attempt: db.TimestampTzString | null;
        /**
        * **app_private.user_secrets.first_failed_reset_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_reset_password_attempt: db.TimestampTzString | null;
        /**
        * **app_private.user_secrets.last_login_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_login_at: db.TimestampTzString;
        /**
        * **app_private.user_secrets.password_hash**
        * - `text` in database
        * - Nullable, no default
        */
        password_hash: string | null;
        /**
        * **app_private.user_secrets.reset_password_token**
        * - `text` in database
        * - Nullable, no default
        */
        reset_password_token: string | null;
        /**
        * **app_private.user_secrets.reset_password_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reset_password_token_generated: db.TimestampTzString | null;
        /**
        * **app_private.user_secrets.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string;
      }
      export interface Whereable {
        /**
        * **app_private.user_secrets.delete_account_token**
        * - `text` in database
        * - Nullable, no default
        */
        delete_account_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.delete_account_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        delete_account_token_generated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.failed_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_password_attempts?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.failed_reset_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_reset_password_attempts?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.first_failed_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_password_attempt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.first_failed_reset_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_reset_password_attempt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.last_login_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_login_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.password_hash**
        * - `text` in database
        * - Nullable, no default
        */
        password_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.reset_password_token**
        * - `text` in database
        * - Nullable, no default
        */
        reset_password_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.reset_password_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reset_password_token_generated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_private.user_secrets.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_private.user_secrets.delete_account_token**
        * - `text` in database
        * - Nullable, no default
        */
        delete_account_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.delete_account_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        delete_account_token_generated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.failed_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_password_attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.failed_reset_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_reset_password_attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.first_failed_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_password_attempt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.first_failed_reset_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_reset_password_attempt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.last_login_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_login_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.password_hash**
        * - `text` in database
        * - Nullable, no default
        */
        password_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.reset_password_token**
        * - `text` in database
        * - Nullable, no default
        */
        reset_password_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.reset_password_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reset_password_token_generated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_private.user_secrets.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_private.user_secrets.delete_account_token**
        * - `text` in database
        * - Nullable, no default
        */
        delete_account_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.delete_account_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        delete_account_token_generated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.failed_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_password_attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.failed_reset_password_attempts**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_reset_password_attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.first_failed_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_password_attempt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.first_failed_reset_password_attempt**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        first_failed_reset_password_attempt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.last_login_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        last_login_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.password_hash**
        * - `text` in database
        * - Nullable, no default
        */
        password_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.reset_password_token**
        * - `text` in database
        * - Nullable, no default
        */
        reset_password_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.reset_password_token_generated**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reset_password_token_generated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_private.user_secrets.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'user_secrets_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = connect_pg_simple_sessions.Table | sessions.Table | unregistered_email_password_resets.Table | user_authentication_secrets.Table | user_email_secrets.Table | user_secrets.Table;
    export type Selectable = connect_pg_simple_sessions.Selectable | sessions.Selectable | unregistered_email_password_resets.Selectable | user_authentication_secrets.Selectable | user_email_secrets.Selectable | user_secrets.Selectable;
    export type JSONSelectable = connect_pg_simple_sessions.JSONSelectable | sessions.JSONSelectable | unregistered_email_password_resets.JSONSelectable | user_authentication_secrets.JSONSelectable | user_email_secrets.JSONSelectable | user_secrets.JSONSelectable;
    export type Whereable = connect_pg_simple_sessions.Whereable | sessions.Whereable | unregistered_email_password_resets.Whereable | user_authentication_secrets.Whereable | user_email_secrets.Whereable | user_secrets.Whereable;
    export type Insertable = connect_pg_simple_sessions.Insertable | sessions.Insertable | unregistered_email_password_resets.Insertable | user_authentication_secrets.Insertable | user_email_secrets.Insertable | user_secrets.Insertable;
    export type Updatable = connect_pg_simple_sessions.Updatable | sessions.Updatable | unregistered_email_password_resets.Updatable | user_authentication_secrets.Updatable | user_email_secrets.Updatable | user_secrets.Updatable;
    export type UniqueIndex = connect_pg_simple_sessions.UniqueIndex | sessions.UniqueIndex | unregistered_email_password_resets.UniqueIndex | user_authentication_secrets.UniqueIndex | user_email_secrets.UniqueIndex | user_secrets.UniqueIndex;
    export type Column = connect_pg_simple_sessions.Column | sessions.Column | unregistered_email_password_resets.Column | user_authentication_secrets.Column | user_email_secrets.Column | user_secrets.Column;
  
    export type AllBaseTables = [connect_pg_simple_sessions.Table, sessions.Table, unregistered_email_password_resets.Table, user_authentication_secrets.Table, user_email_secrets.Table, user_secrets.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [connect_pg_simple_sessions.Table, sessions.Table, unregistered_email_password_resets.Table, user_authentication_secrets.Table, user_email_secrets.Table, user_secrets.Table];
  }


  /* === schema: app_public === */

  export namespace app_public {
  
    /* --- enums --- */
  
    export type privacy = 'private' | 'public';
    export namespace every {
      export type privacy = ['private', 'public'];
    }
    export type user_role = 'admin' | 'moderator' | 'user';
    export namespace every {
      export type user_role = ['admin', 'moderator', 'user'];
    }
  
    /* --- tables --- */
  
    /**
     * **app_public.organization_invitations**
     * - Table in database
     */
    export namespace organization_invitations {
      export type Table = 'app_public.organization_invitations';
      export interface Selectable {
        /**
        * **app_public.organization_invitations.code**
        * - `text` in database
        * - Nullable, no default
        */
        code: string | null;
        /**
        * **app_public.organization_invitations.email**
        * - `citext` in database
        * - Nullable, no default
        */
        email: string | null;
        /**
        * **app_public.organization_invitations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.organization_invitations.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id: string;
        /**
        * **app_public.organization_invitations.user_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        user_id: string | null;
      }
      export interface JSONSelectable {
        /**
        * **app_public.organization_invitations.code**
        * - `text` in database
        * - Nullable, no default
        */
        code: string | null;
        /**
        * **app_public.organization_invitations.email**
        * - `citext` in database
        * - Nullable, no default
        */
        email: string | null;
        /**
        * **app_public.organization_invitations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.organization_invitations.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id: string;
        /**
        * **app_public.organization_invitations.user_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        user_id: string | null;
      }
      export interface Whereable {
        /**
        * **app_public.organization_invitations.code**
        * - `text` in database
        * - Nullable, no default
        */
        code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organization_invitations.email**
        * - `citext` in database
        * - Nullable, no default
        */
        email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organization_invitations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organization_invitations.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organization_invitations.user_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_public.organization_invitations.code**
        * - `text` in database
        * - Nullable, no default
        */
        code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.organization_invitations.email**
        * - `citext` in database
        * - Nullable, no default
        */
        email?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.organization_invitations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.organization_invitations.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_public.organization_invitations.user_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_public.organization_invitations.code**
        * - `text` in database
        * - Nullable, no default
        */
        code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.organization_invitations.email**
        * - `citext` in database
        * - Nullable, no default
        */
        email?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.organization_invitations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.organization_invitations.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_public.organization_invitations.user_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'organization_invitations_organization_id_email_key' | 'organization_invitations_organization_id_user_id_key' | 'organization_invitations_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_public.organization_memberships**
     * - Table in database
     */
    export namespace organization_memberships {
      export type Table = 'app_public.organization_memberships';
      export interface Selectable {
        /**
        * **app_public.organization_memberships.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: Date;
        /**
        * **app_public.organization_memberships.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.organization_memberships.is_billing_contact**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_billing_contact: boolean;
        /**
        * **app_public.organization_memberships.is_owner**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_owner: boolean;
        /**
        * **app_public.organization_memberships.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id: string;
        /**
        * **app_public.organization_memberships.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string;
      }
      export interface JSONSelectable {
        /**
        * **app_public.organization_memberships.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: db.TimestampTzString;
        /**
        * **app_public.organization_memberships.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.organization_memberships.is_billing_contact**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_billing_contact: boolean;
        /**
        * **app_public.organization_memberships.is_owner**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_owner: boolean;
        /**
        * **app_public.organization_memberships.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id: string;
        /**
        * **app_public.organization_memberships.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string;
      }
      export interface Whereable {
        /**
        * **app_public.organization_memberships.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organization_memberships.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organization_memberships.is_billing_contact**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_billing_contact?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organization_memberships.is_owner**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_owner?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organization_memberships.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organization_memberships.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_public.organization_memberships.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.organization_memberships.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.organization_memberships.is_billing_contact**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_billing_contact?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.organization_memberships.is_owner**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_owner?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.organization_memberships.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_public.organization_memberships.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_public.organization_memberships.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.organization_memberships.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.organization_memberships.is_billing_contact**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_billing_contact?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.organization_memberships.is_owner**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_owner?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.organization_memberships.organization_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        organization_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_public.organization_memberships.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'organization_memberships_organization_id_user_id_key' | 'organization_memberships_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_public.organizations**
     * - Table in database
     */
    export namespace organizations {
      export type Table = 'app_public.organizations';
      export interface Selectable {
        /**
        * **app_public.organizations.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: Date;
        /**
        * **app_public.organizations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.organizations.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **app_public.organizations.slug**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        slug: string;
      }
      export interface JSONSelectable {
        /**
        * **app_public.organizations.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: db.TimestampTzString;
        /**
        * **app_public.organizations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.organizations.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **app_public.organizations.slug**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        slug: string;
      }
      export interface Whereable {
        /**
        * **app_public.organizations.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organizations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organizations.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.organizations.slug**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_public.organizations.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.organizations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.organizations.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_public.organizations.slug**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        slug: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_public.organizations.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.organizations.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.organizations.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_public.organizations.slug**
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'organizations_pkey' | 'organizations_slug_key';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_public.posts**
     * - Table in database
     */
    export namespace posts {
      export type Table = 'app_public.posts';
      export interface Selectable {
        /**
        * **app_public.posts.body**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        body: string;
        /**
        * **app_public.posts.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: Date;
        /**
        * **app_public.posts.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **app_public.posts.privacy**
        * - `privacy` in database
        * - `NOT NULL`, default: `'public'::app_public.privacy`
        */
        privacy: privacy;
        /**
        * **app_public.posts.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: Date;
        /**
        * **app_public.posts.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id: string;
      }
      export interface JSONSelectable {
        /**
        * **app_public.posts.body**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        body: string;
        /**
        * **app_public.posts.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: db.TimestampTzString;
        /**
        * **app_public.posts.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **app_public.posts.privacy**
        * - `privacy` in database
        * - `NOT NULL`, default: `'public'::app_public.privacy`
        */
        privacy: privacy;
        /**
        * **app_public.posts.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: db.TimestampTzString;
        /**
        * **app_public.posts.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id: string;
      }
      export interface Whereable {
        /**
        * **app_public.posts.body**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        body?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.posts.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.posts.id**
        * - `int4` in database
        * - Generated column
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.posts.privacy**
        * - `privacy` in database
        * - `NOT NULL`, default: `'public'::app_public.privacy`
        */
        privacy?: privacy | db.Parameter<privacy> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, privacy | db.Parameter<privacy> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.posts.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.posts.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_public.posts.body**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        body: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_public.posts.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.posts.privacy**
        * - `privacy` in database
        * - `NOT NULL`, default: `'public'::app_public.privacy`
        */
        privacy?: privacy | db.Parameter<privacy> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.posts.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.posts.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_public.posts.body**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        body?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_public.posts.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.posts.privacy**
        * - `privacy` in database
        * - `NOT NULL`, default: `'public'::app_public.privacy`
        */
        privacy?: privacy | db.Parameter<privacy> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, privacy | db.Parameter<privacy> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.posts.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.posts.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'posts_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_public.user_authentications**
     * - Table in database
     */
    export namespace user_authentications {
      export type Table = 'app_public.user_authentications';
      export interface Selectable {
        /**
        * **app_public.user_authentications.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: Date;
        /**
        * **app_public.user_authentications.details**
        *
        * Additional profile details extracted from this login method
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details: db.JSONValue;
        /**
        * **app_public.user_authentications.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.user_authentications.identifier**
        *
        * A unique identifier for the user within the login service.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier: string;
        /**
        * **app_public.user_authentications.service**
        *
        * The login service used, e.g. `twitter` or `github`.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        service: string;
        /**
        * **app_public.user_authentications.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: Date;
        /**
        * **app_public.user_authentications.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string;
      }
      export interface JSONSelectable {
        /**
        * **app_public.user_authentications.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: db.TimestampTzString;
        /**
        * **app_public.user_authentications.details**
        *
        * Additional profile details extracted from this login method
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details: db.JSONValue;
        /**
        * **app_public.user_authentications.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.user_authentications.identifier**
        *
        * A unique identifier for the user within the login service.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier: string;
        /**
        * **app_public.user_authentications.service**
        *
        * The login service used, e.g. `twitter` or `github`.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        service: string;
        /**
        * **app_public.user_authentications.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: db.TimestampTzString;
        /**
        * **app_public.user_authentications.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string;
      }
      export interface Whereable {
        /**
        * **app_public.user_authentications.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_authentications.details**
        *
        * Additional profile details extracted from this login method
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_authentications.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_authentications.identifier**
        *
        * A unique identifier for the user within the login service.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_authentications.service**
        *
        * The login service used, e.g. `twitter` or `github`.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        service?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_authentications.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_authentications.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_public.user_authentications.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.user_authentications.details**
        *
        * Additional profile details extracted from this login method
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.user_authentications.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.user_authentications.identifier**
        *
        * A unique identifier for the user within the login service.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_public.user_authentications.service**
        *
        * The login service used, e.g. `twitter` or `github`.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        service: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_public.user_authentications.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.user_authentications.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_public.user_authentications.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.user_authentications.details**
        *
        * Additional profile details extracted from this login method
        * - `jsonb` in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        details?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.user_authentications.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.user_authentications.identifier**
        *
        * A unique identifier for the user within the login service.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_public.user_authentications.service**
        *
        * The login service used, e.g. `twitter` or `github`.
        * - `text` in database
        * - `NOT NULL`, no default
        */
        service?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_public.user_authentications.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.user_authentications.user_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'uniq_user_authentications' | 'user_authentications_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_public.user_emails**
     * - Table in database
     */
    export namespace user_emails {
      export type Table = 'app_public.user_emails';
      export interface Selectable {
        /**
        * **app_public.user_emails.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: Date;
        /**
        * **app_public.user_emails.email**
        *
        * The users email address, in `a@b.c` format.
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email: string;
        /**
        * **app_public.user_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.user_emails.is_primary**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_primary: boolean;
        /**
        * **app_public.user_emails.is_verified**
        *
        * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified: boolean;
        /**
        * **app_public.user_emails.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: Date;
        /**
        * **app_public.user_emails.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id: string;
      }
      export interface JSONSelectable {
        /**
        * **app_public.user_emails.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: db.TimestampTzString;
        /**
        * **app_public.user_emails.email**
        *
        * The users email address, in `a@b.c` format.
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email: string;
        /**
        * **app_public.user_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.user_emails.is_primary**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_primary: boolean;
        /**
        * **app_public.user_emails.is_verified**
        *
        * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified: boolean;
        /**
        * **app_public.user_emails.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: db.TimestampTzString;
        /**
        * **app_public.user_emails.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id: string;
      }
      export interface Whereable {
        /**
        * **app_public.user_emails.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_emails.email**
        *
        * The users email address, in `a@b.c` format.
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_emails.is_primary**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_primary?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_emails.is_verified**
        *
        * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_emails.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.user_emails.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_public.user_emails.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.user_emails.email**
        *
        * The users email address, in `a@b.c` format.
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app_public.user_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.user_emails.is_primary**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_primary?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.user_emails.is_verified**
        *
        * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.user_emails.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.user_emails.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_public.user_emails.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.user_emails.email**
        *
        * The users email address, in `a@b.c` format.
        * - `citext` in database
        * - `NOT NULL`, no default
        */
        email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app_public.user_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.user_emails.is_primary**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_primary?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.user_emails.is_verified**
        *
        * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.user_emails.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.user_emails.user_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `app_public.current_user_id()`
        */
        user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'uniq_user_emails_primary_email' | 'uniq_user_emails_verified_email' | 'user_emails_pkey' | 'user_emails_user_id_email_key';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **app_public.users**
     * - Table in database
     */
    export namespace users {
      export type Table = 'app_public.users';
      export interface Selectable {
        /**
        * **app_public.users.avatar_url**
        *
        * Optional avatar URL.
        * - `url` (base type: `text`) in database
        * - Nullable, no default
        */
        avatar_url: c.PgUrl | null;
        /**
        * **app_public.users.bio**
        * - `text` in database
        * - Nullable, no default
        */
        bio: string | null;
        /**
        * **app_public.users.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: Date;
        /**
        * **app_public.users.id**
        *
        * Unique identifier for the user.
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.users.is_verified**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified: boolean;
        /**
        * **app_public.users.name**
        *
        * Public-facing name (or pseudonym) of the user.
        * - `text` in database
        * - Nullable, no default
        */
        name: string | null;
        /**
        * **app_public.users.role**
        * - `user_role` in database
        * - `NOT NULL`, default: `'user'::app_public.user_role`
        */
        role: user_role;
        /**
        * **app_public.users.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: Date;
        /**
        * **app_public.users.username**
        *
        * Public-facing username (or 'handle') of the user.
        * - `username` (base type: `citext`) in database
        * - `NOT NULL`, no default
        */
        username: c.PgUsername;
      }
      export interface JSONSelectable {
        /**
        * **app_public.users.avatar_url**
        *
        * Optional avatar URL.
        * - `url` (base type: `text`) in database
        * - Nullable, no default
        */
        avatar_url: c.PgUrl | null;
        /**
        * **app_public.users.bio**
        * - `text` in database
        * - Nullable, no default
        */
        bio: string | null;
        /**
        * **app_public.users.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: db.TimestampTzString;
        /**
        * **app_public.users.id**
        *
        * Unique identifier for the user.
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id: string;
        /**
        * **app_public.users.is_verified**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified: boolean;
        /**
        * **app_public.users.name**
        *
        * Public-facing name (or pseudonym) of the user.
        * - `text` in database
        * - Nullable, no default
        */
        name: string | null;
        /**
        * **app_public.users.role**
        * - `user_role` in database
        * - `NOT NULL`, default: `'user'::app_public.user_role`
        */
        role: user_role;
        /**
        * **app_public.users.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: db.TimestampTzString;
        /**
        * **app_public.users.username**
        *
        * Public-facing username (or 'handle') of the user.
        * - `username` (base type: `citext`) in database
        * - `NOT NULL`, no default
        */
        username: c.PgUsername;
      }
      export interface Whereable {
        /**
        * **app_public.users.avatar_url**
        *
        * Optional avatar URL.
        * - `url` (base type: `text`) in database
        * - Nullable, no default
        */
        avatar_url?: c.PgUrl | db.Parameter<c.PgUrl> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUrl | db.Parameter<c.PgUrl> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.users.bio**
        * - `text` in database
        * - Nullable, no default
        */
        bio?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.users.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.users.id**
        *
        * Unique identifier for the user.
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.users.is_verified**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.users.name**
        *
        * Public-facing name (or pseudonym) of the user.
        * - `text` in database
        * - Nullable, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.users.role**
        * - `user_role` in database
        * - `NOT NULL`, default: `'user'::app_public.user_role`
        */
        role?: user_role | db.Parameter<user_role> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, user_role | db.Parameter<user_role> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.users.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **app_public.users.username**
        *
        * Public-facing username (or 'handle') of the user.
        * - `username` (base type: `citext`) in database
        * - `NOT NULL`, no default
        */
        username?: c.PgUsername | db.Parameter<c.PgUsername> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUsername | db.Parameter<c.PgUsername> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **app_public.users.avatar_url**
        *
        * Optional avatar URL.
        * - `url` (base type: `text`) in database
        * - Nullable, no default
        */
        avatar_url?: c.PgUrl | db.Parameter<c.PgUrl> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.users.bio**
        * - `text` in database
        * - Nullable, no default
        */
        bio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.users.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.users.id**
        *
        * Unique identifier for the user.
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.users.is_verified**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.users.name**
        *
        * Public-facing name (or pseudonym) of the user.
        * - `text` in database
        * - Nullable, no default
        */
        name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.users.role**
        * - `user_role` in database
        * - `NOT NULL`, default: `'user'::app_public.user_role`
        */
        role?: user_role | db.Parameter<user_role> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.users.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **app_public.users.username**
        *
        * Public-facing username (or 'handle') of the user.
        * - `username` (base type: `citext`) in database
        * - `NOT NULL`, no default
        */
        username: c.PgUsername | db.Parameter<c.PgUsername> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **app_public.users.avatar_url**
        *
        * Optional avatar URL.
        * - `url` (base type: `text`) in database
        * - Nullable, no default
        */
        avatar_url?: c.PgUrl | db.Parameter<c.PgUrl> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUrl | db.Parameter<c.PgUrl> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.users.bio**
        * - `text` in database
        * - Nullable, no default
        */
        bio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.users.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.users.id**
        *
        * Unique identifier for the user.
        * - `uuid` in database
        * - `NOT NULL`, default: `gen_random_uuid()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.users.is_verified**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        is_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.users.name**
        *
        * Public-facing name (or pseudonym) of the user.
        * - `text` in database
        * - Nullable, no default
        */
        name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.users.role**
        * - `user_role` in database
        * - `NOT NULL`, default: `'user'::app_public.user_role`
        */
        role?: user_role | db.Parameter<user_role> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, user_role | db.Parameter<user_role> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.users.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **app_public.users.username**
        *
        * Public-facing username (or 'handle') of the user.
        * - `username` (base type: `citext`) in database
        * - `NOT NULL`, no default
        */
        username?: c.PgUsername | db.Parameter<c.PgUsername> | db.SQLFragment | db.SQLFragment<any, c.PgUsername | db.Parameter<c.PgUsername> | db.SQLFragment>;
      }
      export type UniqueIndex = 'users_pkey' | 'users_username_key';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = organization_invitations.Table | organization_memberships.Table | organizations.Table | posts.Table | user_authentications.Table | user_emails.Table | users.Table;
    export type Selectable = organization_invitations.Selectable | organization_memberships.Selectable | organizations.Selectable | posts.Selectable | user_authentications.Selectable | user_emails.Selectable | users.Selectable;
    export type JSONSelectable = organization_invitations.JSONSelectable | organization_memberships.JSONSelectable | organizations.JSONSelectable | posts.JSONSelectable | user_authentications.JSONSelectable | user_emails.JSONSelectable | users.JSONSelectable;
    export type Whereable = organization_invitations.Whereable | organization_memberships.Whereable | organizations.Whereable | posts.Whereable | user_authentications.Whereable | user_emails.Whereable | users.Whereable;
    export type Insertable = organization_invitations.Insertable | organization_memberships.Insertable | organizations.Insertable | posts.Insertable | user_authentications.Insertable | user_emails.Insertable | users.Insertable;
    export type Updatable = organization_invitations.Updatable | organization_memberships.Updatable | organizations.Updatable | posts.Updatable | user_authentications.Updatable | user_emails.Updatable | users.Updatable;
    export type UniqueIndex = organization_invitations.UniqueIndex | organization_memberships.UniqueIndex | organizations.UniqueIndex | posts.UniqueIndex | user_authentications.UniqueIndex | user_emails.UniqueIndex | users.UniqueIndex;
    export type Column = organization_invitations.Column | organization_memberships.Column | organizations.Column | posts.Column | user_authentications.Column | user_emails.Column | users.Column;
  
    export type AllBaseTables = [organization_invitations.Table, organization_memberships.Table, organizations.Table, posts.Table, user_authentications.Table, user_emails.Table, users.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [organization_invitations.Table, organization_memberships.Table, organizations.Table, posts.Table, user_authentications.Table, user_emails.Table, users.Table];
  }


  /* === schema: graphile-worker === */

  export namespace graphile-worker {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
    /* (none) */
  
    /* --- aggregate types --- */
  
    // `never` rather than `any` types would be more accurate in this no-tables case, but they stop `shortcuts.ts` compiling
  
    export type Table = never;
    export type Selectable = never;
    export type JSONSelectable = never;
    export type Whereable = never;
    export type Insertable = never;
    export type Updatable = never;
    export type UniqueIndex = never;
    export type Column = never;
  
    export type AllBaseTables = [];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [];
  }


  /* === schema: graphile-migrate === */

  export namespace graphile-migrate {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
    /* (none) */
  
    /* --- aggregate types --- */
  
    // `never` rather than `any` types would be more accurate in this no-tables case, but they stop `shortcuts.ts` compiling
  
    export type Table = never;
    export type Selectable = never;
    export type JSONSelectable = never;
    export type Whereable = never;
    export type Insertable = never;
    export type Updatable = never;
    export type UniqueIndex = never;
    export type Column = never;
  
    export type AllBaseTables = [];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [];
  }


  /* === global aggregate types === */

  export type Schema = 'app_private' | 'app_public' | 'graphile-worker' | 'graphile-migrate';
  export type Table = app_private.Table | app_public.Table | graphile-worker.Table | graphile-migrate.Table;
  export type Selectable = app_private.Selectable | app_public.Selectable | graphile-worker.Selectable | graphile-migrate.Selectable;
  export type JSONSelectable = app_private.JSONSelectable | app_public.JSONSelectable | graphile-worker.JSONSelectable | graphile-migrate.JSONSelectable;
  export type Whereable = app_private.Whereable | app_public.Whereable | graphile-worker.Whereable | graphile-migrate.Whereable;
  export type Insertable = app_private.Insertable | app_public.Insertable | graphile-worker.Insertable | graphile-migrate.Insertable;
  export type Updatable = app_private.Updatable | app_public.Updatable | graphile-worker.Updatable | graphile-migrate.Updatable;
  export type UniqueIndex = app_private.UniqueIndex | app_public.UniqueIndex | graphile-worker.UniqueIndex | graphile-migrate.UniqueIndex;
  export type Column = app_private.Column | app_public.Column | graphile-worker.Column | graphile-migrate.Column;

  export type AllSchemas = ['app_private', 'app_public', 'graphile-worker', 'graphile-migrate'];
  export type AllBaseTables = [...app_private.AllBaseTables, ...app_public.AllBaseTables, ...graphile-worker.AllBaseTables, ...graphile-migrate.AllBaseTables];
  export type AllForeignTables = [...app_private.AllForeignTables, ...app_public.AllForeignTables, ...graphile-worker.AllForeignTables, ...graphile-migrate.AllForeignTables];
  export type AllViews = [...app_private.AllViews, ...app_public.AllViews, ...graphile-worker.AllViews, ...graphile-migrate.AllViews];
  export type AllMaterializedViews = [...app_private.AllMaterializedViews, ...app_public.AllMaterializedViews, ...graphile-worker.AllMaterializedViews, ...graphile-migrate.AllMaterializedViews];
  export type AllTablesAndViews = [...app_private.AllTablesAndViews, ...app_public.AllTablesAndViews, ...graphile-worker.AllTablesAndViews, ...graphile-migrate.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "app_private.connect_pg_simple_sessions": app_private.connect_pg_simple_sessions.Selectable;
    "app_private.sessions": app_private.sessions.Selectable;
    "app_private.unregistered_email_password_resets": app_private.unregistered_email_password_resets.Selectable;
    "app_private.user_authentication_secrets": app_private.user_authentication_secrets.Selectable;
    "app_private.user_email_secrets": app_private.user_email_secrets.Selectable;
    "app_private.user_secrets": app_private.user_secrets.Selectable;
    "app_public.organization_invitations": app_public.organization_invitations.Selectable;
    "app_public.organization_memberships": app_public.organization_memberships.Selectable;
    "app_public.organizations": app_public.organizations.Selectable;
    "app_public.posts": app_public.posts.Selectable;
    "app_public.user_authentications": app_public.user_authentications.Selectable;
    "app_public.user_emails": app_public.user_emails.Selectable;
    "app_public.users": app_public.users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "app_private.connect_pg_simple_sessions": app_private.connect_pg_simple_sessions.JSONSelectable;
    "app_private.sessions": app_private.sessions.JSONSelectable;
    "app_private.unregistered_email_password_resets": app_private.unregistered_email_password_resets.JSONSelectable;
    "app_private.user_authentication_secrets": app_private.user_authentication_secrets.JSONSelectable;
    "app_private.user_email_secrets": app_private.user_email_secrets.JSONSelectable;
    "app_private.user_secrets": app_private.user_secrets.JSONSelectable;
    "app_public.organization_invitations": app_public.organization_invitations.JSONSelectable;
    "app_public.organization_memberships": app_public.organization_memberships.JSONSelectable;
    "app_public.organizations": app_public.organizations.JSONSelectable;
    "app_public.posts": app_public.posts.JSONSelectable;
    "app_public.user_authentications": app_public.user_authentications.JSONSelectable;
    "app_public.user_emails": app_public.user_emails.JSONSelectable;
    "app_public.users": app_public.users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "app_private.connect_pg_simple_sessions": app_private.connect_pg_simple_sessions.Whereable;
    "app_private.sessions": app_private.sessions.Whereable;
    "app_private.unregistered_email_password_resets": app_private.unregistered_email_password_resets.Whereable;
    "app_private.user_authentication_secrets": app_private.user_authentication_secrets.Whereable;
    "app_private.user_email_secrets": app_private.user_email_secrets.Whereable;
    "app_private.user_secrets": app_private.user_secrets.Whereable;
    "app_public.organization_invitations": app_public.organization_invitations.Whereable;
    "app_public.organization_memberships": app_public.organization_memberships.Whereable;
    "app_public.organizations": app_public.organizations.Whereable;
    "app_public.posts": app_public.posts.Whereable;
    "app_public.user_authentications": app_public.user_authentications.Whereable;
    "app_public.user_emails": app_public.user_emails.Whereable;
    "app_public.users": app_public.users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "app_private.connect_pg_simple_sessions": app_private.connect_pg_simple_sessions.Insertable;
    "app_private.sessions": app_private.sessions.Insertable;
    "app_private.unregistered_email_password_resets": app_private.unregistered_email_password_resets.Insertable;
    "app_private.user_authentication_secrets": app_private.user_authentication_secrets.Insertable;
    "app_private.user_email_secrets": app_private.user_email_secrets.Insertable;
    "app_private.user_secrets": app_private.user_secrets.Insertable;
    "app_public.organization_invitations": app_public.organization_invitations.Insertable;
    "app_public.organization_memberships": app_public.organization_memberships.Insertable;
    "app_public.organizations": app_public.organizations.Insertable;
    "app_public.posts": app_public.posts.Insertable;
    "app_public.user_authentications": app_public.user_authentications.Insertable;
    "app_public.user_emails": app_public.user_emails.Insertable;
    "app_public.users": app_public.users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "app_private.connect_pg_simple_sessions": app_private.connect_pg_simple_sessions.Updatable;
    "app_private.sessions": app_private.sessions.Updatable;
    "app_private.unregistered_email_password_resets": app_private.unregistered_email_password_resets.Updatable;
    "app_private.user_authentication_secrets": app_private.user_authentication_secrets.Updatable;
    "app_private.user_email_secrets": app_private.user_email_secrets.Updatable;
    "app_private.user_secrets": app_private.user_secrets.Updatable;
    "app_public.organization_invitations": app_public.organization_invitations.Updatable;
    "app_public.organization_memberships": app_public.organization_memberships.Updatable;
    "app_public.organizations": app_public.organizations.Updatable;
    "app_public.posts": app_public.posts.Updatable;
    "app_public.user_authentications": app_public.user_authentications.Updatable;
    "app_public.user_emails": app_public.user_emails.Updatable;
    "app_public.users": app_public.users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "app_private.connect_pg_simple_sessions": app_private.connect_pg_simple_sessions.UniqueIndex;
    "app_private.sessions": app_private.sessions.UniqueIndex;
    "app_private.unregistered_email_password_resets": app_private.unregistered_email_password_resets.UniqueIndex;
    "app_private.user_authentication_secrets": app_private.user_authentication_secrets.UniqueIndex;
    "app_private.user_email_secrets": app_private.user_email_secrets.UniqueIndex;
    "app_private.user_secrets": app_private.user_secrets.UniqueIndex;
    "app_public.organization_invitations": app_public.organization_invitations.UniqueIndex;
    "app_public.organization_memberships": app_public.organization_memberships.UniqueIndex;
    "app_public.organizations": app_public.organizations.UniqueIndex;
    "app_public.posts": app_public.posts.UniqueIndex;
    "app_public.user_authentications": app_public.user_authentications.UniqueIndex;
    "app_public.user_emails": app_public.user_emails.UniqueIndex;
    "app_public.users": app_public.users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "app_private.connect_pg_simple_sessions": app_private.connect_pg_simple_sessions.Column;
    "app_private.sessions": app_private.sessions.Column;
    "app_private.unregistered_email_password_resets": app_private.unregistered_email_password_resets.Column;
    "app_private.user_authentication_secrets": app_private.user_authentication_secrets.Column;
    "app_private.user_email_secrets": app_private.user_email_secrets.Column;
    "app_private.user_secrets": app_private.user_secrets.Column;
    "app_public.organization_invitations": app_public.organization_invitations.Column;
    "app_public.organization_memberships": app_public.organization_memberships.Column;
    "app_public.organizations": app_public.organizations.Column;
    "app_public.posts": app_public.posts.Column;
    "app_public.user_authentications": app_public.user_authentications.Column;
    "app_public.user_emails": app_public.user_emails.Column;
    "app_public.users": app_public.users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "app_private.connect_pg_simple_sessions": app_private.connect_pg_simple_sessions.SQL;
    "app_private.sessions": app_private.sessions.SQL;
    "app_private.unregistered_email_password_resets": app_private.unregistered_email_password_resets.SQL;
    "app_private.user_authentication_secrets": app_private.user_authentication_secrets.SQL;
    "app_private.user_email_secrets": app_private.user_email_secrets.SQL;
    "app_private.user_secrets": app_private.user_secrets.SQL;
    "app_public.organization_invitations": app_public.organization_invitations.SQL;
    "app_public.organization_memberships": app_public.organization_memberships.SQL;
    "app_public.organizations": app_public.organizations.SQL;
    "app_public.posts": app_public.posts.SQL;
    "app_public.user_authentications": app_public.user_authentications.SQL;
    "app_public.user_emails": app_public.user_emails.SQL;
    "app_public.users": app_public.users.SQL;
  }[T];

}
